# -*- coding: utf-8 -*-
"""sentimental analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JW6QY_ufHknauUfMF778m1Vc1L0tsD5U
"""

#installing kaggle library
! pip install kaggle

# configuring path of kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#api command
!kaggle datasets download -d bwandowando/3-million-instagram-google-store-reviews

#extracting zip file
from zipfile import ZipFile
dataset = '/content/3-million-instagram-google-store-reviews.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('extracted')

#required libraries
import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

df=pd.read_csv('/content/INSTAGRAM_REVIEWS.csv',encoding= 'ISO-8859-1')

df.shape

df.head()

df.isnull().sum()

df.dropna(subset=['review_text'], inplace=True)  # Drop missing reviews

df['author_app_version'] = df['author_app_version'].fillna('unknown') # Fill Nan Values

df.isnull().sum()

df.shape

df.head()

df['review_rating'].value_counts()

#labelling the ratings
def label_sentiment(rating):
    if rating >= 4:
        return 'positive review'
    elif rating == 3:
        return 'neutral review'
    else:
        return 'negative review'

df['sentiment'] = df['review_rating'].apply(label_sentiment)
print(df['sentiment'].value_counts())

port_stem=PorterStemmer()
def stemming(content):
  stemmed_content=re.sub('[^a-zA-Z]',' ',content)
  stemmed_content=stemmed_content.lower()
  stemmed_content=stemmed_content.split()
  stemmed_content=[port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content=' '.join(stemmed_content)
  return stemmed_content

df['stemmed_content']=df['review_text'].apply(stemming)

# Clean missing stemmed_content first
df = df[df['stemmed_content'].notna()]
df = df[df['stemmed_content'].str.strip() != '']

df.head()

from sklearn.utils import resample

df_pos = df[df['sentiment'] == 'positive review']
df_neg =df[df['sentiment'] == 'negative review']
df_neu = df[df['sentiment'] == 'neutral review']

df_neg_upsampled = resample(df_neg,
                            replace=True,
                            n_samples=len(df_pos),
                            random_state=42)

df_neu_upsampled = resample(df_neu,
                            replace=True,
                            n_samples=len(df_pos),
                            random_state=42)

df_balanced = pd.concat([df_pos, df_neg_upsampled, df_neu_upsampled])
print(df_balanced['sentiment'].value_counts())

#converting textual data to numerical data
vectorizer = TfidfVectorizer(ngram_range=(1,2), max_features=20000)

X = vectorizer.fit_transform(df_balanced['stemmed_content'])  # âœ… Don't overwrite this!

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(df_balanced['sentiment'])

print(X)

print(y)

X_train, X_test, y_train, y_test, idx_train, idx_test = train_test_split(
    X, y, df_balanced.index,
    test_size=0.2,
    stratify=y,
    random_state=42
)

print(X.shape,X_train.shape,X_test.shape)

print(X_train.shape[0], y_train.shape[0])

print(X_train)

print(X_test)

print(df.shape)
print(df['review_rating'].shape)

print(df_balanced['sentiment'].shape)

#training the model
model = LogisticRegression(max_iter=1000)

model.fit(X_train,y_train)

#accuracy score on training model
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

#accuracy score on test model
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

baseline_accuracy = df_balanced['sentiment'].value_counts(normalize=True).max()
print(baseline_accuracy)

import pickle

filename='trained_model.sav'
pickle.dump(model,open(filename,'wb'))

#loading saved model
loaded_model=pickle.load(open('trained_model.sav','rb'))

X_new=X_test[3]
print(y_test[3])
prediction = model.predict(X_new)
sentiment = le.inverse_transform(prediction)[0]
print("Predicted Sentiment:", sentiment)

X_new=X_test[11]
print(y_test[11])
prediction = model.predict(X_new)
sentiment = le.inverse_transform(prediction)[0]
print("Predicted Sentiment:", sentiment)

proba = model.predict_proba(X_new)
print("Class Probabilities:", proba)
print("Predicted Label:", le.inverse_transform([np.argmax(proba)]))

